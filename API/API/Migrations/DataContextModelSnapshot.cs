// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("API.Data.Entities.EmailConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("EnableSSL")
                        .HasColumnType("boolean");

                    b.Property<string>("Host")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDefaultReceiver")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefaultSender")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Port")
                        .HasMaxLength(100)
                        .HasColumnType("integer");

                    b.Property<DateTime>("RowDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("EmailConfigs");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Active = true,
                            Disabled = false,
                            DisplayName = "Sender",
                            Email = "noreply@email.com",
                            EnableSSL = true,
                            Host = "smtp.host.com",
                            IsDefaultReceiver = false,
                            IsDefaultSender = true,
                            Password = "password",
                            Port = 587,
                            RowDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "sender_username"
                        },
                        new
                        {
                            Id = -2,
                            Active = true,
                            Disabled = false,
                            DisplayName = "Receiver",
                            Email = "receiver@email.com",
                            EnableSSL = true,
                            Host = "imap.host.com",
                            IsDefaultReceiver = true,
                            IsDefaultSender = false,
                            Password = "password",
                            Port = 993,
                            RowDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "receiver_username"
                        });
                });

            modelBuilder.Entity("API.Data.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("RowDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            Id = -2,
                            Body = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;\"> <head style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;\"> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;\"> </head> <body bgcolor=\"#f7f7f7\" style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;-webkit-font-smoothing: antialiased;-webkit-text-size-adjust: none;height: 100%;color: #676767;width: 100% !important;margin: 0 !important;\"> <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" class=\"container-for-gmail-android\" width=\"100%\" style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;min-width: 600px;border-collapse: collapse !important;\"> <tbody style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;\"> <tr style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;\"> <td align=\"center\" valign=\"top\" width=\"100%\" style=\"background-color: #f7f7f7;font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;font-size: 14px;color: #777777;text-align: center;line-height: 21px;border-collapse: collapse;padding: 20px 0 5px;\" class=\"content-padding\"> <center style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;\"> <table cellspacing=\"0\" cellpadding=\"0\" width=\"600\" class=\"w320\" style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;border-collapse: collapse !important;\"> <tbody style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;\"> <tr style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;\"> <td class=\"header-lg\" style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;font-size: 32px;color: #4d4d4d;text-align: center;line-height: normal;border-collapse: collapse;font-weight: 700;padding: 35px 0 0;\"> <img src=\"https://placeholder.com/wp-content/uploads/2018/10/placeholder.com-logo4.png\" style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;max-width: 600px;outline: none;text-decoration: none;-ms-interpolation-mode: bicubic;\"> </td></tr><tr style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;\"> <td class=\"header-lg\" style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;font-size: 32px;color: #4d4d4d;text-align: center;line-height: normal;border-collapse: collapse;font-weight: 700;padding: 35px 0 0;\"> Welcome! </td></tr><tr style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;\"> <td class=\"free-text\" style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;font-size: 14px;color: #777777;text-align: center;line-height: 21px;border-collapse: collapse;padding: 10px 60px 0px;width: 100% !important;\"> Hello{0}{1}! <br style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;\"> Please click the link below to finalize your registration. </td></tr><tr style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;\"> <td class=\"button\" style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;font-size: 14px;color: #777777;text-align: center;line-height: 21px;border-collapse: collapse;padding: 30px 0;\"> <div style=\"font-family: 'Oxygen', 'Helvetica Neue', 'Arial', 'sans-serif' !important;\"><!--[if mso]> <v:roundrect xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:w=\"urn:schemas-microsoft-com:office:word\" href=\"http://\" style=\"height:45px;v-text-anchor:middle;width:155px;\" arcsize=\"15%\" strokecolor=\"#ffffff\" fillcolor=\"#296196\"> <w:anchorlock/> <center style=\"color:#ffffff;font-family:Helvetica, Arial, sans-serif;font-size:14px;font-weight:regular;\">Track Order</center> </v:roundrect><![endif]--><a href=\"{2}\" style=\"background-color:#623062;border-radius:5px;color:#ffffff;display:inline-block;font-family:'Cabin', Helvetica, Arial, sans-serif;font-size:14px;font-weight:regular;line-height:45px;text-align:center;text-decoration:none;width:155px;-webkit-text-size-adjust:none;mso-hide:all;\">Confirm Registration</a> </div></td></tr></tbody> </table> </center> </td></tr></tbody> </table> </body></html>",
                            Disabled = false,
                            Name = "Account.RegistrationCode",
                            RowDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "Welcome!"
                        },
                        new
                        {
                            Id = -3,
                            Body = "<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\"><html xmlns='http://www.w3.org/1999/xhtml' style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important'><head style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important'><meta http-equiv='Content-Type' content='text/html; charset=UTF-8' style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important'><meta name='viewport' content='width=device-width,initial-scale=1' style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important'></head><body bgcolor='#f7f7f7' style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important;-webkit-font-smoothing:antialiased;-webkit-text-size-adjust:none;height:100%;color:#676767;width:100%!important;margin:0!important'><table align='center' cellpadding='0' cellspacing='0' class='container-for-gmail-android' width='100%' style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important;min-width:600px;border-collapse:collapse!important'><tbody style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important'><tr style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important'><td align='center' valign='top' width='100%' style='background-color:#f7f7f7;font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important;font-size:14px;color:#777;text-align:center;line-height:21px;border-collapse:collapse;padding:20px 0 5px' class='content-padding'><center style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important'><table cellspacing='0' cellpadding='0' width='600' class='w320' style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important;border-collapse:collapse!important'><tbody style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important'><tr style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important'><td class='header-lg' style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important;font-size:32px;color:#4d4d4d;text-align:center;line-height:normal;border-collapse:collapse;font-weight:700;padding:35px 0 0'><img src='https://placeholder.com/wp-content/uploads/2018/10/placeholder.com-logo4.png' style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important;max-width:600px;outline:0;text-decoration:none;-ms-interpolation-mode:bicubic'></td></tr><tr style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important'><td class='header-lg' style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important;font-size:32px;color:#4d4d4d;text-align:center;line-height:normal;border-collapse:collapse;font-weight:700;padding:35px 0 0'>Forgot your Password?</td></tr><tr style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important'><td class='free-text' style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important;font-size:14px;color:#777;text-align:center;line-height:21px;border-collapse:collapse;padding:10px 60px 0;width:100%!important'>Hello{0}{1}!<br style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important'>Please use the code below to confirm your account</td></tr><tr style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important'><td class='button' style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important;font-size:14px;color:#777;text-align:center;line-height:21px;border-collapse:collapse;padding:30px 0'><div style='font-family:Oxygen,&#39;Helvetica Neue&#39;,Arial,sans-serif!important'><h2>{2}</h2></div></td></tr></tbody></table></center></td></tr></tbody></table></body></html>",
                            Disabled = false,
                            Name = "Account.ForgotPassword",
                            RowDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "Forgot your password?"
                        });
                });

            modelBuilder.Entity("API.Data.Entities.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Log")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Method")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Path")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("RowDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("API.Data.Entities.Permissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Group")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ParentCodes")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Parents")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("RowDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = -2,
                            Description = "Locked or Error",
                            Disabled = false,
                            Group = "System",
                            Name = "Locked",
                            RowDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 0
                        },
                        new
                        {
                            Id = -1,
                            Description = "This allows the user to access every feature and bypasses every restriction",
                            Disabled = false,
                            Group = "System",
                            Name = "AccessAll",
                            RowDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 65535
                        },
                        new
                        {
                            Id = 1,
                            Description = "Administrator",
                            Disabled = false,
                            Group = "System",
                            Name = "System Administrator",
                            RowDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Administrator",
                            Disabled = false,
                            Group = "Administrator",
                            Name = "Administrator",
                            RowDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 3
                        },
                        new
                        {
                            Id = 3,
                            Description = "Client",
                            Disabled = false,
                            Group = "Client",
                            Name = "Client",
                            RowDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 2
                        });
                });

            modelBuilder.Entity("API.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("API.Data.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RowDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Subscription");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2021, 5, 20, 23, 48, 54, 920, DateTimeKind.Utc).AddTicks(8852),
                            Disabled = false,
                            RowDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("API.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("ConfirmationCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RevokeCode")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("RowDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f8684da2-4887-4288-b841-af07477a54d1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b141bd8d-ead0-4e13-af3c-f64cf23d8e62",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            Enabled = true,
                            FirstName = "CC",
                            LastName = "API",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFP/5y7mPRDa2ZUjfLkwZ9M9kBq8f9gbHhuD7pdJxOO5SjT3kSVdexrbDNg0gUnRhw==",
                            PhoneNumberConfirmed = false,
                            RevokeCode = "b2f9f7e6-08c7-4ee8-8987-0416ffae2640",
                            RowDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "OYMY4LSEJV7NWVIQRYBDZ4FMP5F5BTCA",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("API.Data.Entities.UserPermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<int>("PermissionsId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RowDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PermissionsId", "UserId")
                        .IsUnique();

                    b.ToTable("UserPermissions");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Disabled = false,
                            PermissionsId = -1,
                            RowDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("f8684da2-4887-4288-b841-af07477a54d1")
                        },
                        new
                        {
                            Id = -2,
                            Disabled = false,
                            PermissionsId = -2,
                            RowDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("f8684da2-4887-4288-b841-af07477a54d1")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("API.Data.Entities.ErrorLog", b =>
                {
                    b.HasOne("API.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Data.Entities.UserPermissions", b =>
                {
                    b.HasOne("API.Data.Entities.Permissions", "Permissions")
                        .WithMany("Users")
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Entities.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permissions");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("API.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("API.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("API.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("API.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("API.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Data.Entities.Permissions", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("API.Data.Entities.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
